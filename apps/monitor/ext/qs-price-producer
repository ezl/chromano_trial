#!/usr/bin/env python
import httplib
import datetime
import re
import logging
import os
import socket
import time

import simplejson as json
import stomp

from monitor.models import FinancialInstrument
from monitor.ext.yfinance import YahooSymbol

path = os.getcwd()
LOG_FILENAME = "/home/quotesentinel/log/stream.log"
logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG)

class YahooFinanceStream(object):
    """ Streaming data implementation """
    RECONNECT_DELAY = 30

    def __init__(self):
        self.symbols = {}
        self.conn = None
        self.data = ''
        self.active = True
        self.stomp_conn = stomp.Connection()
        self.stomp_conn.set_listener('', self)
        self.stomp_conn.start()

    def on_message(self, header, message):
        if message.startswith("ADD"):
            parts = message.split(" ")
            item = FinancialInstrument.objects.get(symbol=parts[1])
            self.add_symbol(item)
            logging.info("SYMBOL %r ADDED" % parts[1])

    def connect(self):
        logging.debug(".CONNECT")
        symbols_slug = ','.join(self.symbols.keys()) or 'A'
        self.conn = httplib.HTTPConnection("streamerapi.finance.yahoo.com")
        self.conn.request("GET", "/streamer/1.0?s=%s&k=%s&" \
            "callback=parent.yfs_u1f&mktmcb=parent.yfs_mktmcb&" \
            "gencallback=parent.yfs_gencb" % (symbols_slug, 'l90'))
        self.resp = self.conn.getresponse()
        self.data = ''
        logging.debug(".FINISHED CONNECT")

    def run(self):
        logging.debug("%s | QS-PRICE-PRODUCER STARTED -- PID=%r"
                      % (datetime.datetime.now(), os.getpid()))
        logging.debug("%s | SYMBOLS: %s"
                      % (datetime.datetime.now(), self.symbols.keys()))
        while self.active:
            try:
                self.connect()
                self.stomp_conn.connect()
                self.stomp_conn.subscribe(
                    destination='/prices/add', ack='auto')
                while True:
                    # Code should block at this point and only returns when
                    # something is read from the other peer.  If nothing is
                    # returned it is most likely the connection is gone, so
                    # we just reconnect.
                    char = self.resp.read(1)
                    if not char:
                        break
                    self.data += char
                    if char == '>':
                        self.parse_line(self.data)
                        self.data = ''
            except (httplib.HTTPException, socket.error), e:
                self.conn.close()
                delay = YahooFinanceStream.RECONNECT_DELAY
                logging.debug("Failure on connect or reading from peer."
                              " New connection attempt in %d seconds..."
                              % delay)
                time.sleep(delay)
            except Exception, e:
                logging.debug("UNHANDLED EXCEPTION")
                logging.debug(e)
                raise
                self.active = False

    def parse_line(self, line):
        m = re.search("\((.*?)\)", line)
        if not m:
            return
        valid = re.sub("(\w+):", '"\\1":', m.group(1))
        data = json.loads(valid)

        if "unixtime" in data.keys():
            logging.debug("%s | HEARTBEAT: %s" % (datetime.datetime.now(), data["unixtime"]))
            return

        for k, v in data.items():
            price = v['l90']
            logging.debug("%s | %s: %s" % (datetime.datetime.now(), k, price))
            self.symbols[k].price = price
            self.stomp_conn.send("%s,%s,%s" % (k, self.symbols[k].name, price),
                                 destination="/queue/prices")
            item = FinancialInstrument.objects.get(symbol=k)
            item.last_price = price
            item.save()

    def add_symbol(self, item):
        self.symbols[item.symbol] = \
            YahooSymbol(item.symbol, item.name, item.last_price)
        if self.conn:
            self.conn.close()


# create thread instance
yahoo_feed = YahooFinanceStream()
for item in FinancialInstrument.objects.all():
    yahoo_feed.add_symbol(item)
yahoo_feed.run()

# available data items
yahoo_items = {
    'a00': 'ask price',
    'b00': 'bid price',
    'g00': "day's range low",
    'h00': "day's range high",
    'j10': 'market cap',
    'v00': 'volume',
    'a50': 'ask size',
    'b60': 'bid size',
    'b30': 'ecn bid',
    'o50': 'ecn bid size',
    'z03': 'ecn ext hr bid',
    'z04': 'ecn ext hr bid size',
    'b20': 'ecn ask',
    'o40': 'ecn ask size',
    'z05': 'ecn ext hr ask',
    'z07': 'ecn ext hr ask size',
    'h01': "ecn day's high",
    'g01': "ecn day's low",
    'h02': "ecn ext hr day's high",
    'g11': "ecn ext hr day's low",
    't10': 'last trade time, will be in unix epoch format',
    't50': 'ecnQuote/last/time',
    't51': 'ecn ext hour time',
    't53': 'RTQuote/last/time',
    't54': 'RTExthourQuote/last/time',
    'l10': 'last trade',
    'l90': 'ecnQuote/last/value',
    'l91': 'ecn ext hour price',
    'l84': 'RTQuote/last/value',
    'l86': 'RTExthourQuote/last/value',
    'c10': 'quote/change/absolute',
    'c81': 'ecnQuote/afterHourChange/absolute',
    'c60': 'ecnQuote/change/absolute',
    'z02': 'ecn ext hour change',
    'z08': 'ecn ext hour change',
    'c63': 'RTQuote/change/absolute',
    'c85': 'RTExthourQuote/afterHourChange/absolute',
    'c64': 'RTExthourQuote/change/absolute',
    'p20': 'quote/change/percent',
    'c82': 'ecnQuote/afterHourChange/percent',
    'p40': 'ecnQuote/change/percent',
    'p41': 'ecn ext hour percent change',
    'z09': 'ecn ext hour percent change',
    'p43': 'RTQuote/change/percent',
    'c86': 'RTExtHourQuote/afterHourChange/percent',
    'p44': 'RTExtHourQuote/change/percent',
}
